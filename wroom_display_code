#include <WiFi.h>
#include <WiFiUdp.h>
#include <TFT_eSPI.h>
#include <TJpg_Decoder.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <freertos/semphr.h>

// Network Configuration
const char* AP_SSID = "WROOM_Display";
const char* AP_PASSWORD = "12345678";
const IPAddress LOCAL_IP(192, 168, 4, 1);
const IPAddress GATEWAY(192, 168, 4, 1);
const IPAddress SUBNET(255, 255, 255, 0);
const int UDP_PORT = 4210;

// Display Configuration
const uint16_t DISPLAY_WIDTH = 480;
const uint16_t DISPLAY_HEIGHT = 320;
const uint8_t DISPLAY_ROTATION = 1;

// High-Speed Configuration
const uint32_t MAX_FRAME_SIZE = 35000;     // Optimized size
const uint32_t FRAME_TIMEOUT = 150;        // Faster timeout for higher FPS
const uint32_t MIN_HEAP_SIZE = 15000;      // Memory threshold
const uint32_t TARGET_FPS = 60;            // High refresh rate target
const uint32_t MIN_RENDER_INTERVAL = 16;   // 16ms = 60 FPS
const uint32_t FAST_RENDER_INTERVAL = 8;   // 8ms = 125 FPS for burst mode

// Hardware
TFT_eSPI tft = TFT_eSPI();
WiFiUDP udp;

// Memory-Efficient Frame Management with Display Buffer
uint8_t* frameBuffer = nullptr;
uint8_t* assemblyBuffer = nullptr;         // For frame assembly
uint16_t* displayBuffer = nullptr;         // NEW: Small display buffer for atomic updates
bool* packetReceived = nullptr;            // Packet tracking
uint16_t maxPackets = 500;                 // Maximum packets to track

// Display buffer configuration - optimized for speed
const uint32_t DISPLAY_BUFFER_SIZE = DISPLAY_WIDTH * DISPLAY_HEIGHT * 2; // 16-bit pixels
const uint16_t STRIP_HEIGHT = 20;          // Smaller strips for faster updates
const uint16_t FAST_STRIP_HEIGHT = 10;     // Ultra-fast strips for high FPS

// Complete Frame State
struct CompleteFrameState {
  uint16_t frameId;
  uint16_t totalPackets;
  uint16_t receivedPackets;
  uint32_t totalSize;
  uint32_t startTime;
  bool isComplete;
  bool isValid;
  bool isRendering;
};

CompleteFrameState currentFrame = {0, 0, 0, 0, 0, false, false, false};

// Performance Monitoring
uint32_t totalFramesStarted = 0;
uint32_t completeFramesReceived = 0;
uint32_t completeFramesRendered = 0;
uint32_t incompleteFramesDiscarded = 0;
uint32_t corruptFramesDiscarded = 0;
uint32_t memoryErrors = 0;

// FreeRTOS Synchronization
TaskHandle_t udpTaskHandle = NULL;
TaskHandle_t displayTaskHandle = NULL;
TaskHandle_t monitorTaskHandle = NULL;
SemaphoreHandle_t frameMutex = NULL;
SemaphoreHandle_t displayMutex = NULL;

// Client monitoring
int connectedClients = 0;

// Memory-efficient JPEG validation
bool validateCompleteJPEG(uint8_t* buffer, uint32_t size) {
  if (!buffer || size < 20) return false;
  
  // Check JPEG start marker
  if (buffer[0] != 0xFF || buffer[1] != 0xD8) return false;
  
  // Check JPEG end marker - search last 20 bytes
  bool hasEndMarker = false;
  uint32_t searchStart = (size > 20) ? size - 20 : 0;
  for (uint32_t i = searchStart; i < size - 1; i++) {
    if (buffer[i] == 0xFF && buffer[i + 1] == 0xD9) {
      hasEndMarker = true;
      break;
    }
  }
  
  return hasEndMarker;
}

// High-speed TJpg callback - optimized for performance
bool highSpeedTftOutput(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t* bitmap) {
  if (!bitmap || y >= DISPLAY_HEIGHT || x >= DISPLAY_WIDTH) return 0;
  
  // Fast bounds checking
  if (x + w > DISPLAY_WIDTH) w = DISPLAY_WIDTH - x;
  if (y + h > DISPLAY_HEIGHT) h = DISPLAY_HEIGHT - y;
  
  if (w > 0 && h > 0) {
    if (displayBuffer) {
      // High-speed buffer copy with DMA-aligned access
      for (uint16_t row = 0; row < h; row++) {
        uint32_t dstOffset = (y + row) * DISPLAY_WIDTH + x;
        uint32_t srcOffset = row * w;
        
        if (dstOffset + w <= DISPLAY_WIDTH * DISPLAY_HEIGHT) {
          // Fast memcpy for performance
          memcpy(&displayBuffer[dstOffset], &bitmap[srcOffset], w << 1);
        }
      }
    } else {
      // Direct high-speed rendering
      tft.pushImage(x, y, w, h, bitmap);
    }
  }
  
  // Reduced yield frequency for higher speed
  static uint16_t callCount = 0;
  if (++callCount % 32 == 0) {
    taskYIELD();
    callCount = 0;
  }
  
  return 1;
}

// Initialize memory-efficient buffers with optional display buffer
bool initMemoryEfficientBuffers() {
  // Calculate memory requirements
  uint32_t frameBufferSize = MAX_FRAME_SIZE;
  uint32_t assemblyBufferSize = MAX_FRAME_SIZE;
  uint32_t packetTrackingSize = maxPackets;
  
  // Try to allocate display buffer if enough memory
  uint32_t availableHeap = ESP.getFreeHeap();
  bool useDisplayBuffer = (availableHeap > DISPLAY_BUFFER_SIZE + frameBufferSize + assemblyBufferSize + packetTrackingSize + 40000);
  
  uint32_t totalNeeded = frameBufferSize + assemblyBufferSize + packetTrackingSize;
  if (useDisplayBuffer) totalNeeded += DISPLAY_BUFFER_SIZE;
  
  Serial.printf("Memory check: Need %d KB, Available %d KB\n", 
               totalNeeded/1024, availableHeap/1024);
  Serial.printf("Display buffer: %s\n", useDisplayBuffer ? "ENABLED" : "DISABLED");
  
  if (availableHeap < totalNeeded + 20000) {
    Serial.printf("Insufficient memory for buffers!\n");
    return false;
  }
  
  // Allocate buffers
  frameBuffer = (uint8_t*)heap_caps_malloc(frameBufferSize, MALLOC_CAP_8BIT);
  assemblyBuffer = (uint8_t*)heap_caps_malloc(assemblyBufferSize, MALLOC_CAP_8BIT);
  packetReceived = (bool*)heap_caps_malloc(packetTrackingSize, MALLOC_CAP_8BIT);
  
  if (useDisplayBuffer) {
    displayBuffer = (uint16_t*)heap_caps_malloc(DISPLAY_BUFFER_SIZE, MALLOC_CAP_8BIT);
  }
  
  if (!frameBuffer || !assemblyBuffer || !packetReceived || (useDisplayBuffer && !displayBuffer)) {
    Serial.println("Failed to allocate memory-efficient buffers");
    // Cleanup
    if (frameBuffer) { heap_caps_free(frameBuffer); frameBuffer = nullptr; }
    if (assemblyBuffer) { heap_caps_free(assemblyBuffer); assemblyBuffer = nullptr; }
    if (packetReceived) { heap_caps_free(packetReceived); packetReceived = nullptr; }
    if (displayBuffer) { heap_caps_free(displayBuffer); displayBuffer = nullptr; }
    return false;
  }
  
  // Initialize buffers
  memset(frameBuffer, 0, frameBufferSize);
  memset(assemblyBuffer, 0, assemblyBufferSize);
  memset(packetReceived, false, packetTrackingSize);
  
  if (displayBuffer) {
    memset(displayBuffer, 0, DISPLAY_BUFFER_SIZE);
  }
  
  Serial.printf("Memory-efficient buffers allocated: %d KB\n", totalNeeded/1024);
  return true;
}

// Complete frame assembly with packet verification
bool assembleCompleteFrame() {
  if (!assemblyBuffer || !packetReceived) return false;
  
  // Verify ALL packets received
  for (uint16_t i = 0; i < currentFrame.totalPackets; i++) {
    if (!packetReceived[i]) {
      Serial.printf("Missing packet %d in frame %d\n", i, currentFrame.frameId);
      return false;
    }
  }
  
  // Validate complete JPEG
  if (!validateCompleteJPEG(assemblyBuffer, currentFrame.totalSize)) {
    Serial.printf("Invalid JPEG in frame %d\n", currentFrame.frameId);
    corruptFramesDiscarded++;
    return false;
  }
  
  // Copy to final frame buffer
  memcpy(frameBuffer, assemblyBuffer, currentFrame.totalSize);
  currentFrame.isValid = true;
  completeFramesReceived++;
  
  Serial.printf("Frame %d assembled: %d packets, %d bytes\n", 
               currentFrame.frameId, currentFrame.totalPackets, currentFrame.totalSize);
  
  return true;
}

// High-speed complete frame rendering
bool renderCompleteFrameHighSpeed() {
  if (!currentFrame.isValid || currentFrame.isRendering) {
    return false;
  }
  
  currentFrame.isRendering = true;
  uint32_t renderStart = micros();
  
  // Clear display buffer if available (not screen)
  if (displayBuffer) {
    memset(displayBuffer, 0, DISPLAY_BUFFER_SIZE);
  }
  
  // High-speed JPEG rendering
  TJpgDec.setJpgScale(1);
  bool success = TJpgDec.drawJpg(0, 0, frameBuffer, currentFrame.totalSize);
  
  if (success && displayBuffer) {
    // Ultra-fast strip-based transfer to screen
    tft.startWrite();
    
    // Use smaller strips for higher refresh rate
    uint16_t stripHeight = (TARGET_FPS > 45) ? FAST_STRIP_HEIGHT : STRIP_HEIGHT;
    
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += stripHeight) {
      uint16_t currentStripHeight = min((uint16_t)stripHeight, (uint16_t)(DISPLAY_HEIGHT - y));
      
      tft.setAddrWindow(0, y, DISPLAY_WIDTH, currentStripHeight);
      
      uint32_t pixelOffset = y * DISPLAY_WIDTH;
      uint32_t pixelsToSend = currentStripHeight * DISPLAY_WIDTH;
      
      tft.pushPixels(&displayBuffer[pixelOffset], pixelsToSend);
      
      // Minimal yielding for maximum speed
      if (y % (stripHeight * 4) == 0) {
        taskYIELD();
      }
    }
    
    tft.endWrite();
  }
  
  uint32_t renderTime = micros() - renderStart;
  
  if (success) {
    completeFramesRendered++;
    Serial.printf("Frame %d rendered in %d Âµs\n", currentFrame.frameId, renderTime);
  } else {
    Serial.printf("Frame %d render failed\n", currentFrame.frameId);
  }
  
  currentFrame.isRendering = false;
  return success;
}

// High-speed packet processing
void processHighSpeedPacket(int packetSize) {
  uint8_t packetBuffer[1500];
  int bytesRead = udp.read(packetBuffer, packetSize);
  
  if (bytesRead < 12 || bytesRead != packetSize) return;
  
  // Fast packet header parsing
  uint32_t frame_id = *(uint32_t*)&packetBuffer[0];
  uint16_t total_packets = *(uint16_t*)&packetBuffer[4];
  uint16_t packet_idx = *(uint16_t*)&packetBuffer[6];
  uint32_t packet_size = *(uint32_t*)&packetBuffer[8];
  uint8_t* packetData = &packetBuffer[12];
  uint32_t actualDataSize = bytesRead - 12;
  
  // Quick validation
  if (packet_size != actualDataSize || packet_idx >= total_packets || 
      total_packets == 0 || total_packets > maxPackets) {
    return;
  }
  
  // Fast mutex acquisition with shorter timeout
  if (xSemaphoreTake(frameMutex, pdMS_TO_TICKS(5)) != pdTRUE) {
    return;
  }
  
  // Handle first packet of new frame
  if (packet_idx == 0) {
    // Quick JPEG header validation
    if (actualDataSize < 2 || packetData[0] != 0xFF || packetData[1] != 0xD8) {
      xSemaphoreGive(frameMutex);
      return;
    }
    
    // Fast frame initialization
    currentFrame.frameId = frame_id;
    currentFrame.totalPackets = total_packets;
    currentFrame.receivedPackets = 1;
    currentFrame.totalSize = packet_size;
    currentFrame.startTime = millis();
    currentFrame.isComplete = false;
    currentFrame.isValid = false;
    currentFrame.isRendering = false;
    
    totalFramesStarted++;
    
    // Fast packet tracking reset
    memset(packetReceived, false, maxPackets);
    packetReceived[0] = true;
    
    // Fast buffer copy
    if (packet_size <= MAX_FRAME_SIZE) {
      memcpy(assemblyBuffer, packetData, packet_size);
    } else {
      currentFrame.receivedPackets = 0;
      xSemaphoreGive(frameMutex);
      return;
    }
    
    // Single packet frame check
    if (total_packets == 1) {
      currentFrame.isComplete = true;
    }
    
  } else {
    // Fast continuation packet handling
    if (frame_id != currentFrame.frameId || currentFrame.receivedPackets == 0) {
      xSemaphoreGive(frameMutex);
      return;
    }
    
    // Quick duplicate check
    if (packetReceived[packet_idx]) {
      xSemaphoreGive(frameMutex);
      return;
    }
    
    // Fast size validation
    if (currentFrame.totalSize + packet_size > MAX_FRAME_SIZE) {
      currentFrame.receivedPackets = 0;
      xSemaphoreGive(frameMutex);
      return;
    }
    
    // High-speed packet copy
    memcpy(assemblyBuffer + currentFrame.totalSize, packetData, packet_size);
    currentFrame.totalSize += packet_size;
    currentFrame.receivedPackets++;
    packetReceived[packet_idx] = true;
    
    // Frame completion check
    if (currentFrame.receivedPackets == currentFrame.totalPackets) {
      currentFrame.isComplete = true;
    }
  }
  
  xSemaphoreGive(frameMutex);
}

// High-speed frame timeout handling
void handleHighSpeedFrameTimeout() {
  if (currentFrame.receivedPackets > 0 && 
      (millis() - currentFrame.startTime) > FRAME_TIMEOUT) {
    
    if (xSemaphoreTake(frameMutex, pdMS_TO_TICKS(2)) == pdTRUE) {
      
      // Quick timeout handling for high FPS
      currentFrame.receivedPackets = 0;
      currentFrame.isComplete = false;
      incompleteFramesDiscarded++;
      
      xSemaphoreGive(frameMutex);
    }
  }
}

// WiFi event handler
void WiFiEvent(WiFiEvent_t event) {
  switch (event) {
    case ARDUINO_EVENT_WIFI_AP_STACONNECTED:
      connectedClients++;
      Serial.printf("Client connected. Total: %d\n", connectedClients);
      break;
    case ARDUINO_EVENT_WIFI_AP_STADISCONNECTED:
      connectedClients--;
      if (connectedClients <= 0) connectedClients = 0;
      Serial.printf("Client disconnected. Total: %d\n", connectedClients);
      break;
    default:
      break;
  }
}

// Performance monitoring task
void monitorTask(void *pvParameters) {
  const TickType_t xDelay = pdMS_TO_TICKS(3000);
  
  while(1) {
    uint32_t heapFree = ESP.getFreeHeap();
    float completionRate = totalFramesStarted > 0 ? 
                          (float)completeFramesReceived / totalFramesStarted * 100.0f : 0.0f;
    float renderRate = completeFramesReceived > 0 ? 
                      (float)completeFramesRendered / completeFramesReceived * 100.0f : 0.0f;
    
    Serial.printf("=== COMPLETE FRAME DISPLAY ===\n");
    Serial.printf("Started: %d, Complete: %d (%.1f%%)\n", 
                 totalFramesStarted, completeFramesReceived, completionRate);
    Serial.printf("Rendered: %d (%.1f%% of complete)\n", 
                 completeFramesRendered, renderRate);
    Serial.printf("Discarded: Incomplete=%d, Corrupt=%d\n", 
                 incompleteFramesDiscarded, corruptFramesDiscarded);
    Serial.printf("Current: ID=%d, Packets=%d/%d, Size=%d\n", 
                 currentFrame.frameId, currentFrame.receivedPackets, 
                 currentFrame.totalPackets, currentFrame.totalSize);
    Serial.printf("Memory: Free=%d KB, Errors=%d\n", heapFree/1024, memoryErrors);
    Serial.printf("Clients: %d\n", connectedClients);
    Serial.println("=============================");
    
    vTaskDelay(xDelay);
  }
}

// High-speed UDP task for packet reception
void highSpeedUdpTask(void *pvParameters) {
  const TickType_t xDelay = pdMS_TO_TICKS(1); // Minimal delay for max speed
  
  while(1) {
    // Process multiple packets per cycle for higher throughput
    for (int i = 0; i < 3; i++) {
      int packetSize = udp.parsePacket();
      if (packetSize > 0 && packetSize <= 1500) {
        processHighSpeedPacket(packetSize);
      } else {
        break; // No more packets, exit loop
      }
    }
    
    handleHighSpeedFrameTimeout();
    vTaskDelay(xDelay);
  }
}

// High-speed display task for complete frame rendering
void highSpeedDisplayTask(void *pvParameters) {
  const TickType_t xDelay = pdMS_TO_TICKS(8); // Faster polling for high FPS
  uint32_t lastRenderTime = 0;
  uint32_t frameCount = 0;
  uint32_t adaptiveInterval = MIN_RENDER_INTERVAL;
  
  while(1) {
    uint32_t currentTime = millis();
    
    // Adaptive frame rate control
    if (frameCount % 30 == 0 && frameCount > 0) {
      float avgFPS = 30000.0f / (currentTime - lastRenderTime + 1);
      if (avgFPS > TARGET_FPS * 1.1f) {
        adaptiveInterval = min((uint32_t)(adaptiveInterval + 1), (uint32_t)MIN_RENDER_INTERVAL);
      } else if (avgFPS < TARGET_FPS * 0.9f) {
        adaptiveInterval = max((uint32_t)(adaptiveInterval - 1), (uint32_t)FAST_RENDER_INTERVAL);
      }
    }
    
    // Check for complete frame ready to render
    if (currentFrame.isComplete && !currentFrame.isRendering && 
        (currentTime - lastRenderTime) >= adaptiveInterval) {
      
      if (xSemaphoreTake(displayMutex, pdMS_TO_TICKS(15)) == pdTRUE) {
        
        // Fast frame assembly
        if (assembleCompleteFrame()) {
          // High-speed frame rendering
          if (renderCompleteFrameHighSpeed()) {
            lastRenderTime = currentTime;
            frameCount++;
          }
        }
        
        // Quick frame state reset
        currentFrame.isComplete = false;
        currentFrame.isValid = false;
        currentFrame.receivedPackets = 0;
        
        xSemaphoreGive(displayMutex);
      }
    }
    
    // Quick memory check
    if (ESP.getFreeHeap() < MIN_HEAP_SIZE) {
      memoryErrors++;
    }
    
    vTaskDelay(xDelay);
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("==========================================");
  Serial.println("COMPLETE FRAME DISPLAY SYSTEM");
  Serial.println("Memory-Optimized Anti-Partial Rendering");
  Serial.println("==========================================");
  
  // Initialize display
  Serial.println("Initializing display...");
  tft.init();
  tft.setRotation(DISPLAY_ROTATION);
  tft.fillScreen(TFT_BLACK);
  tft.setSwapBytes(true);
  
  // Display startup message
  tft.setTextColor(TFT_CYAN, TFT_BLACK);
  tft.setTextSize(2);
  tft.setCursor(60, 130);
  tft.println("COMPLETE FRAME");
  tft.setCursor(80, 160);
  tft.println("DISPLAY READY");
  
  Serial.printf("Display initialized: %dx%d\n", tft.width(), tft.height());
  
  // Initialize TJpg_Decoder for high-speed rendering
  Serial.println("Initializing high-speed JPEG decoder...");
  TJpgDec.setJpgScale(1);
  TJpgDec.setCallback(highSpeedTftOutput);
  Serial.println("High-speed JPEG decoder ready");
  
  // Initialize memory-efficient buffers
  if (!initMemoryEfficientBuffers()) {
    Serial.println("FATAL: Buffer initialization failed!");
    tft.fillScreen(TFT_RED);
    tft.setTextColor(TFT_WHITE, TFT_RED);
    tft.setCursor(120, 150);
    tft.println("MEMORY ERROR");
    while(1) delay(1000);
  }
  
  // Create synchronization objects
  Serial.println("Creating synchronization objects...");
  frameMutex = xSemaphoreCreateMutex();
  displayMutex = xSemaphoreCreateMutex();
  
  if (frameMutex == NULL || displayMutex == NULL) {
    Serial.println("FATAL: Failed to create mutexes!");
    while(1) delay(1000);
  }
  
  // Setup WiFi AP
  Serial.println("Setting up WiFi Access Point...");
  WiFi.onEvent(WiFiEvent);
  WiFi.mode(WIFI_AP);
  
  if (!WiFi.softAPConfig(LOCAL_IP, GATEWAY, SUBNET)) {
    Serial.println("FATAL: Failed to configure AP");
    while(1) delay(1000);
  }
  
  if (!WiFi.softAP(AP_SSID, AP_PASSWORD, 1, 0, 4)) {
    Serial.println("FATAL: Failed to start AP");
    while(1) delay(1000);
  }
  
  Serial.printf("WiFi AP: %s (%s)\n", AP_SSID, WiFi.softAPIP().toString().c_str());
  
  // Start UDP server
  if (!udp.begin(UDP_PORT)) {
    Serial.println("FATAL: Failed to start UDP server");
    while(1) delay(1000);
  }
  Serial.printf("UDP server on port %d\n", UDP_PORT);
  
  // Create high-speed tasks with optimized priorities
  Serial.println("Creating high-speed tasks...");
  
  BaseType_t result1 = xTaskCreatePinnedToCore(
    highSpeedUdpTask, "High-Speed UDP", 3072, NULL, 7, &udpTaskHandle, 0);  // Higher priority
  
  BaseType_t result2 = xTaskCreatePinnedToCore(
    highSpeedDisplayTask, "High-Speed Display", 4096, NULL, 6, &displayTaskHandle, 1);  // Higher priority
  
  BaseType_t result3 = xTaskCreatePinnedToCore(
    monitorTask, "Monitor", 2048, NULL, 1, &monitorTaskHandle, 0);  // Lower priority
  
  if (result1 != pdPASS || result2 != pdPASS || result3 != pdPASS) {
    Serial.println("FATAL: Failed to create tasks");
    while(1) delay(1000);
  }
  
  Serial.println("Tasks created successfully");
  
  // Clear startup message
  delay(3000);
  tft.fillScreen(TFT_BLACK);
  
  Serial.println("==========================================");
  Serial.println("HIGH-SPEED COMPLETE FRAME SYSTEM READY");
  Serial.println("Features:");
  Serial.println("â 60+ FPS target with adaptive rate control");
  Serial.println("â High-speed packet processing");
  Serial.println("â Optimized rendering pipeline");
  Serial.println("â Complete frame validation");
  Serial.println("â NO screen clearing (smooth video)");
  Serial.println("â Multi-packet processing per cycle");
  Serial.println("â Adaptive strip rendering");
  Serial.printf("Target FPS: %d (adaptive up to 125 FPS)\n", TARGET_FPS);
  Serial.printf("Min render interval: %d ms\n", MIN_RENDER_INTERVAL);
  Serial.printf("Fast render interval: %d ms\n", FAST_RENDER_INTERVAL);
  Serial.printf("Max frame size: %d KB\n", MAX_FRAME_SIZE/1024);
  Serial.printf("Free memory: %d KB\n", ESP.getFreeHeap()/1024);
  Serial.println("HIGH-SPEED SMOOTH VIDEO READY!");
  Serial.println("==========================================");
  
  vTaskDelete(NULL);
}

void loop() {
  vTaskDelete(NULL);
}
