# ESP32 Modular High-Speed Display System

A modular, high-performance ESP32-based display system for real-time video streaming with complete frame validation and anti-partial rendering.

## Features

- **High-Speed Performance**: 60+ FPS with adaptive rate control up to 125 FPS
- **Complete Frame Validation**: Only displays fully received and validated frames
- **Memory Optimized**: Efficient buffer management with optional display buffering
- **Modular Architecture**: Clean separation of concerns for maintainability
- **FreeRTOS Integration**: Multi-task architecture with proper synchronization
- **WiFi AP Mode**: Creates its own access point for client connections
- **UDP Packet Processing**: High-speed multi-packet processing per cycle
- **JPEG Validation**: Complete JPEG header/footer validation
- **Performance Monitoring**: Real-time statistics and monitoring

## Architecture

### Core Modules

1. **Config Module** (`config.h/cpp`)
   - Centralized configuration management
   - Network, display, and performance parameters
   - Frame state structures

2. **Display Manager** (`display_manager.h/cpp`)
   - TFT display initialization and management
   - High-speed rendering with optional display buffering
   - Strip-based rendering for optimal performance
   - JPEG decoder integration

3. **Frame Processor** (`frame_processor.h/cpp`)
   - UDP packet assembly and validation
   - Complete frame validation with JPEG verification
   - Memory-efficient buffer management
   - Thread-safe frame state management

4. **Network Manager** (`network_manager.h/cpp`)
   - WiFi Access Point setup and management
   - UDP server for packet reception
   - Client connection monitoring
   - Packet reading interface

5. **Performance Monitor** (`performance_monitor.h/cpp`)
   - Real-time performance statistics
   - Frame completion and render rates
   - Memory usage monitoring
   - Error tracking and reporting

6. **Task Manager** (`task_manager.h/cpp`)
   - FreeRTOS task creation and management
   - High-speed UDP processing task
   - Display rendering task with adaptive frame rate
   - Performance monitoring task

## Project Structure

```
src/
├── main.cpp                    # Main application entry point
├── config.h                    # Configuration header
├── config.cpp                  # Configuration implementation
├── display_manager.h           # Display management header
├── display_manager.cpp         # Display management implementation
├── frame_processor.h           # Frame processing header
├── frame_processor.cpp         # Frame processing implementation
├── network_manager.h           # Network management header
├── network_manager.cpp         # Network management implementation
├── performance_monitor.h       # Performance monitoring header
├── performance_monitor.cpp     # Performance monitoring implementation
├── task_manager.h              # Task management header
└── task_manager.cpp            # Task management implementation
```

## Configuration

### Network Settings
- **SSID**: `WROOM_Display`
- **Password**: `12345678`
- **IP Address**: `192.168.4.1`
- **UDP Port**: `4210`

### Display Settings
- **Resolution**: 480x320 pixels
- **Rotation**: 1 (landscape)
- **Color Depth**: 16-bit (RGB565)

### Performance Settings
- **Target FPS**: 60 (adaptive up to 125)
- **Max Frame Size**: 35KB
- **Frame Timeout**: 150ms
- **Min Heap Size**: 15KB

## Hardware Requirements

### ESP32 Development Board
- **RAM**: Minimum 520KB (standard ESP32)
- **Flash**: 4MB minimum
- **Cores**: Dual-core (tasks distributed across both cores)

### Display
- **Interface**: SPI
- **Driver**: Compatible with TFT_eSPI library
- **Recommended**: ILI9488 or similar
- **Resolution**: 480x320 recommended

### Connections
Update `User_Setup.h` in TFT_eSPI library with your pin configuration:

```cpp
#define TFT_MISO 19
#define TFT_MOSI 23
#define TFT_SCLK 18
#define TFT_CS   15
#define TFT_DC    2
#define TFT_RST   4
```

## Dependencies

### Arduino Libraries
- **TFT_eSPI** by Bodmer (v2.5.0+)
- **TJpg_Decoder** by Bodmer (v1.0.8+)
- **ESP32 Arduino Core**

### Platform Support
- **PlatformIO**: Recommended for easy dependency management
- **Arduino IDE**: Supported with manual library installation

## Build Instructions

### Using PlatformIO
1. Create new PlatformIO project
2. Copy all source files to `src/` directory
3. Update `platformio.ini` with provided configuration
4. Build and upload: `pio run --target upload`

### Using Arduino IDE
1. Install required libraries through Library Manager
2. Configure TFT_eSPI by editing `User_Setup.h`
3. Copy all files to Arduino sketch folder
4. Compile and upload

## Usage

### Client Connection
1. Connect to WiFi network: `WROOM_Display`
2. Use password: `12345678`
3. Send UDP packets to: `192.168.4.1:4210`

### Packet Format
```
Header (12 bytes):
- Frame ID (4 bytes): Unique frame identifier
- Total Packets (2 bytes): Number of packets in frame
- Packet Index (2 bytes): Current packet index (0-based)
- Packet Size (4 bytes): Size of packet data

Data (variable):
- JPEG data chunk
```

### Frame Requirements
- **First packet**: Must start with JPEG header (0xFF 0xD8)
- **Last packet**: Must include JPEG footer (0xFF 0xD9)
- **Maximum size**: 35KB per complete frame
- **Format**: Valid JPEG image data

## Performance Features

### Adaptive Frame Rate
- **Base target**: 60 FPS (16ms intervals)
- **Burst mode**: Up to 125 FPS (8ms intervals)
- **Auto-adjustment**: Based on processing performance

### Memory Management
- **Frame buffers**: Dual buffering for assembly/display
- **Display buffer**: Optional high-speed buffer (if memory allows)
- **Packet tracking**: Efficient boolean array for packet verification
- **Heap monitoring**: Continuous memory usage tracking

### Multi-Core Processing
- **Core 0**: UDP reception and frame assembly
- **Core 1**: Display rendering and performance monitoring
- **Load balancing**: Optimized task distribution

## Monitoring and Debugging

### Serial Output
The system provides detailed monitoring information:
- Frame assembly status
- Rendering performance
- Memory usage
- Client connections
- Error conditions

### Performance Metrics
- **Frame completion rate**: Percentage of successfully assembled frames
- **Render rate**: Percentage of frames actually displayed
- **Memory errors**: Count of low-memory conditions
- **Timeout errors**: Incomplete frame discards

## Troubleshooting

### Common Issues

1. **Memory allocation failures**
   - Reduce `MAX_FRAME_SIZE` in config
   - Disable display buffer if needed
   - Check available heap at startup

2. **Display artifacts**
   - Verify TFT_eSPI pin configuration
   - Check SPI clock speed settings
   - Ensure proper power supply

3. **Network connectivity**
   - Verify ESP32 is creating access point
   - Check client connection to correct SSID
   - Confirm UDP packet format

4. **Performance issues**
   - Monitor serial output for bottlenecks
   - Adjust frame timeout settings
   - Verify packet size limits

### Optimization Tips

1. **Memory optimization**
   - Use smaller strip heights for lower memory usage
   - Disable display buffer on memory-constrained systems
   - Reduce maximum packet count if needed

2. **Performance tuning**
   - Adjust task priorities based on requirements
   - Modify render intervals for different FPS targets
   - Optimize packet processing batch size

3. **Network optimization**
   - Use wired connections when possible
   - Minimize network congestion
   - Implement packet prioritization on sender side

## License

This project is provided as-is for educational and development purposes. Please ensure compliance with all applicable licenses for dependent libraries.

## Contributing

This modular architecture makes it easy to extend functionality:
- Add new display drivers in `DisplayManager`
- Implement different network protocols in `NetworkManager`
- Extend performance monitoring with additional metrics
- Add new processing algorithms in `FrameProcessor`

Each module is designed to be independently testable and replaceable while maintaining clean interfaces between components.
